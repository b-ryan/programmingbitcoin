(ns programming-bitcoin.bitcoin-curve
  (:require [clojure.math.numeric-tower :refer [expt]]
            [programming-bitcoin.finite-fields :as ff]
            [programming-bitcoin.elliptic-curves :as ec]))

(def ^:private prime (- (expt 2 256) (expt 2 32) 977))
(def ^:private a (ff/e 0 prime))
(def ^:private b (ff/e 7 prime))
(def ^:private gx
  (ff/e
   (biginteger
    "55066263022277343669578718895168534326250603453777594175500187360389116729240")
   prime))
(def ^:private gy
  (ff/e
   (biginteger
    "32670510020758816978083085130507043184471273380659243275938904335757337482424")
   prime))

#_(def aaa
    (-> (ff/pow gx 2)
        (ff/scalar-mul 3)
        (ff/add a)))
#_(def bbb
    (ff/scalar-mul gy 2))
#_(ff/div aaa bbb)

#_(inc 3)

(def ^{:doc "Generator point of the Bitcoin curve."}
     G
  (ec/p gx gy a b))

(def
  ^{:doc
    "The order of the group generated by G.

  Ie. the number of points in the group. G * n = point at infinity."}
  n
  (biginteger
   "115792089237316195423570985008687907852837564279074904382605163141518161494337"))

#_(= (mod (expt (:number gy) 2) prime) (mod (+ (expt (:number gx) 3) 7) prime))
#_(ec/scalar-mul G n)
#_(ec/add G G)
#_(clojure.pprint/pprint G)
#_(prn *e)
#_(programming-bitcoin.primitives/pow (programming-bitcoin.finite-fields/e 0 7) 2)
